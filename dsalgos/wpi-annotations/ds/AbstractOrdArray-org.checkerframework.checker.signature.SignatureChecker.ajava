package ds;

import java.util.ConcurrentModificationException;

/**
 * Demonstrates array class with high-level interface.
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.signature.SignatureChecker")
public abstract class AbstractOrdArray extends AbstractArray {

    public AbstractOrdArray() {
        // empty constructor
    }

    public AbstractOrdArray( @org.checkerframework.checker.signature.qual.SignatureUnknown int max,  @org.checkerframework.checker.signature.qual.SignatureUnknown boolean strict) {
        super(max, strict);
    }

    public AbstractOrdArray(@org.checkerframework.checker.signature.qual.SignatureUnknown AbstractOrdArray array) {
        super(array);
    }

    @org.checkerframework.dataflow.qual.Pure
    public abstract @org.checkerframework.checker.signature.qual.SignatureUnknown IArray copy();

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.signature.qual.SignatureUnknown int findIndex(@org.checkerframework.checker.signature.qual.SignatureUnknown AbstractOrdArray this,  @org.checkerframework.checker.signature.qual.SignatureUnknown long searchKey) {
        return findIndex(searchKey, nElems.intValue());
    }

    @org.checkerframework.dataflow.qual.Pure
    protected  @org.checkerframework.checker.signature.qual.SignatureUnknown int findIndex(@org.checkerframework.checker.signature.qual.SignatureUnknown AbstractOrdArray this,  @org.checkerframework.checker.signature.qual.SignatureUnknown long searchKey,  @org.checkerframework.checker.signature.qual.SignatureUnknown int length) {
        int lowerBound = 0;
        int upperBound = length - 1;
        while (lowerBound <= upperBound) {
            int mid = lowerBound + ((upperBound - lowerBound) >>> 1);
            long midVal = a[mid];
            if (midVal == searchKey)
                return mid;
            if (midVal < searchKey)
                lowerBound = mid + 1;
            else
                upperBound = mid - 1;
        }
        // key not found
        return -(lowerBound + 1);
    }

    // -----------------------------------------------------------
    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.signature.qual.SignatureUnknown boolean find(@org.checkerframework.checker.signature.qual.SignatureUnknown AbstractOrdArray this,  @org.checkerframework.checker.signature.qual.SignatureUnknown long searchKey) {
        return findIndex(searchKey) >= 0;
    }

    /**
     * Insert element into array.
     *
     * @param value element to insert
     * @return index of inserted element.
     */
    public  @org.checkerframework.checker.signature.qual.SignatureUnknown int insert(@org.checkerframework.checker.signature.qual.SignatureUnknown AbstractOrdArray this,  @org.checkerframework.checker.signature.qual.SignatureUnknown long value) {
        int length = nElems.intValue();
        if (length == a.length)
            throw new ArrayIndexOutOfBoundsException(length);
        return insert(value, length);
    }

    protected  @org.checkerframework.checker.signature.qual.SignatureUnknown int insert(@org.checkerframework.checker.signature.qual.SignatureUnknown AbstractOrdArray this,  @org.checkerframework.checker.signature.qual.SignatureUnknown long value,  @org.checkerframework.checker.signature.qual.SignatureUnknown int length) {
        int expectedCount = modCount.intValue();
        int j = findIndex(value, length);
        j = j < 0 ? -1 * j - 1 : j;
        if (strict)
            checkInsertConcurrent(expectedCount, value);
        moveAndInsert(j, length, value);
        return j;
    }

    protected void moveAndInsert(@org.checkerframework.checker.signature.qual.SignatureUnknown AbstractOrdArray this,  @org.checkerframework.checker.signature.qual.SignatureUnknown int j,  @org.checkerframework.checker.signature.qual.SignatureUnknown int count,  @org.checkerframework.checker.signature.qual.SignatureUnknown long value) {
        modCount.incrementAndGet();
        int numMoved = count - j;
        System.arraycopy(a, j, a, j + 1, numMoved);
        nElems.getAndIncrement();
        a[j] = value;
    }

    @org.checkerframework.dataflow.qual.Deterministic
    protected void checkInsertConcurrent(@org.checkerframework.checker.signature.qual.SignatureUnknown AbstractOrdArray this,  @org.checkerframework.checker.signature.qual.SignatureUnknown int expectedCount,  @org.checkerframework.checker.signature.qual.SignatureUnknown long value) {
        if (expectedCount < modCount.intValue()) {
            throw new ConcurrentModificationException("Error inserting value: " + value);
        }
    }

    @org.checkerframework.dataflow.qual.Deterministic
    protected void checkDeleteConcurrent(@org.checkerframework.checker.signature.qual.SignatureUnknown AbstractOrdArray this,  @org.checkerframework.checker.signature.qual.SignatureUnknown int expectedCount,  @org.checkerframework.checker.signature.qual.SignatureUnknown long value) {
        if (expectedCount < modCount.intValue()) {
            throw new ConcurrentModificationException("Error deleting value: " + value);
        }
    }

    protected void fastDelete(@org.checkerframework.checker.signature.qual.SignatureUnknown AbstractOrdArray this,  @org.checkerframework.checker.signature.qual.SignatureUnknown int index,  @org.checkerframework.checker.signature.qual.SignatureUnknown int length) {
        modCount.incrementAndGet();
        // move higher ones down
        int numMoved = length - index - 1;
        System.arraycopy(a, index + 1, a, index, numMoved);
        a[nElems.decrementAndGet()] = 0;
    }

    public  @org.checkerframework.checker.signature.qual.SignatureUnknown boolean delete(@org.checkerframework.checker.signature.qual.SignatureUnknown AbstractOrdArray this,  @org.checkerframework.checker.signature.qual.SignatureUnknown long value) {
        return delete(value, nElems.intValue());
    }

    protected  @org.checkerframework.checker.signature.qual.SignatureUnknown boolean delete(@org.checkerframework.checker.signature.qual.SignatureUnknown AbstractOrdArray this,  @org.checkerframework.checker.signature.qual.SignatureUnknown long value,  @org.checkerframework.checker.signature.qual.SignatureUnknown int length) {
        int expectedCount = modCount.intValue();
        int j = findIndex(value, length);
        if (j < 0)
            return false;
        if (strict)
            checkDeleteConcurrent(expectedCount, value);
        fastDelete(j, length);
        return true;
    }

    @org.checkerframework.dataflow.qual.Pure
    public boolean equals(final Object o) {
        if (o == this)
            return true;
        if (!(o instanceof AbstractOrdArray))
            return false;
        final AbstractOrdArray other = (AbstractOrdArray) o;
        if (!other.canEqual((Object) this))
            return false;
        if (!super.equals(o))
            return false;
        return true;
    }

    @org.checkerframework.dataflow.qual.Pure
    protected boolean canEqual(final Object other) {
        return other instanceof AbstractOrdArray;
    }

    @org.checkerframework.dataflow.qual.Pure
    public int hashCode() {
        final int result = super.hashCode();
        return result;
    }
}
