package ds;

import static ds.ExecutorUtils.terminateExecutor;
import java.util.Arrays;
import java.util.concurrent.ForkJoinPool;
import java.util.concurrent.RecursiveAction;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.KeyForSubchecker")
public class QuickSortParallel extends AbstractSort {

    private static final   int CUTOFF = 8;

    private static final   int MEDIUM = 40;

    private final  AtomicInteger swapCount = new AtomicInteger();

    private final  AtomicInteger comparisonCount = new AtomicInteger();

    private final  AtomicInteger innerLoopCount = new AtomicInteger();

    private final  AtomicInteger outerLoopCount = new AtomicInteger();

    @org.checkerframework.dataflow.qual.Pure
    public   int getSwapCount( QuickSortParallel this) {
        return swapCount.intValue();
    }

    @org.checkerframework.dataflow.qual.Pure
    public   int getComparisonCount( QuickSortParallel this) {
        return comparisonCount.intValue();
    }

    @org.checkerframework.dataflow.qual.Pure
    public   int getTimeComplexity( QuickSortParallel this) {
        int count = innerLoopCount.intValue();
        return count > 0 ? count : outerLoopCount.intValue();
    }

    public void reset( QuickSortParallel this) {
        swapCount.set(0);
        innerLoopCount.set(0);
        outerLoopCount.set(0);
        comparisonCount.set(0);
    }

    public  String toString( QuickSortParallel this) {
        StringBuilder sb = new StringBuilder(66);
        String lineSeparator = System.lineSeparator();
        sb.append(getClass().getName()).append(lineSeparator).append("Comparison count: ").append(comparisonCount).append(lineSeparator).append("Swap count: ").append(swapCount).append(lineSeparator).append("inner loop count: ").append(innerLoopCount).append(lineSeparator).append("outer loop count: ").append(outerLoopCount).append(lineSeparator);
        return sb.toString();
    }

    protected void sort( QuickSortParallel this,   long  [] a,   int length) {
        if (!shouldSort(length))
            return;
        ForkJoinPool pool = new ForkJoinPool();
        pool.invoke(new QuickSortAction(a, 0, length - 1));
        terminateExecutor(pool, length, TimeUnit.MILLISECONDS);
    }

    @org.checkerframework.dataflow.qual.Pure
    public static   boolean less(  long v,   long w) {
        return v < w;
    }

    // return the index of the median element among a[i], a[j], and a[k]
    @org.checkerframework.dataflow.qual.Pure
    public static   int median3(  long  [] a,   int i,   int j,   int k) {
        return less(a[i], a[j]) ? less(a[j], a[k]) ? j : less(a[i], a[k]) ? k : i : less(a[k], a[j]) ? j : less(a[k], a[i]) ? k : i;
    }

    final class QuickSortAction extends RecursiveAction implements Cloneable {

        private static final   long serialVersionUID = 1L;

        final   long  [] a;

          int low;

          int high;

        QuickSortAction(  long  [] a,   int low,   int high) {
            this.a = a;
            this.low = low;
            this.high = high;
        }

        @org.checkerframework.dataflow.qual.SideEffectFree
        public  QuickSortAction clone( QuickSortAction this) {
            try {
                return (QuickSortAction) super.clone();
            } catch (CloneNotSupportedException cnse) {
                throw new AssertionError("Shouldn't get here..." + cnse.getMessage(), cnse);
            }
        }

        protected void compute( QuickSortAction this) {
            while (low < high) {
                int n = high - low + 1;
                if (n <= CUTOFF) {
                    Arrays.sort(a, low, low + n);
                    return;
                }
                int s = n >> 3;
                int middle = n >> 1;
                int m = n > MEDIUM ? median3(a, median3(a, low, low + s, low + (s << 1)), median3(a, middle - s, middle, middle + s), median3(a, high - (s << 1), high - s, high)) : median3(a, low, low + middle, high);
                if (m != low && a[low] > a[m]) {
                    swap(a, m, low);
                    swapCount.incrementAndGet();
                }
                int pivotIndex = partition(a, low, high);
                if ((pivotIndex - low) <= (high - pivotIndex)) {
                    QuickSortAction copy = this.clone();
                    copy.low = low;
                    copy.high = pivotIndex + 1;
                    invokeAll(copy);
                    low = pivotIndex + 1;
                } else {
                    QuickSortAction copy = this.clone();
                    copy.low = pivotIndex + 1;
                    copy.high = high;
                    invokeAll(copy);
                    high = pivotIndex - 1;
                }
            }
        }

        private   int partition( QuickSortAction this,   long  [] array,   int lo,   int hi) {
            int i = lo;
            int j = hi + 1;
            long v = array[lo];
            while (true) {
                outerLoopCount.incrementAndGet();
                // find item on lo to swap
                while (less(array[++i], v)) {
                    innerLoopCount.incrementAndGet();
                    comparisonCount.incrementAndGet();
                }
                comparisonCount.incrementAndGet();
                // find item on hi to swap
                while (less(v, array[--j])) {
                    innerLoopCount.incrementAndGet();
                    comparisonCount.incrementAndGet();
                }
                comparisonCount.incrementAndGet();
                // check if pointers cross
                if (i >= j || array[i] == array[j])
                    break;
                swap(array, i, j);
                swapCount.incrementAndGet();
            }
            if (lo != j && array[lo] != array[j]) {
                swap(array, lo, j);
                swapCount.incrementAndGet();
            }
            return j;
        }
    }
}
