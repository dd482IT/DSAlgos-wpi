package ds;

import java.util.Random;
import java.util.stream.IntStream;
import java.util.stream.LongStream;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.optional.OptionalChecker")
public final class RandomUtils {

    private static final @org.checkerframework.checker.optional.qual.MaybePresent Random RANDOM = new Random();

    @org.checkerframework.dataflow.qual.SideEffectFree
    private RandomUtils() throws InstantiationException {
        throw new InstantiationException("Private constructor invoked for class: " + RandomUtils.class);
    }

    public static  @org.checkerframework.checker.optional.qual.MaybePresent int randomInRange( @org.checkerframework.checker.optional.qual.MaybePresent int low,  @org.checkerframework.checker.optional.qual.MaybePresent int high) {
        return RANDOM.nextInt(high - low) + low;
    }

    public static @org.checkerframework.checker.optional.qual.MaybePresent LongStream longStream() {
        return RANDOM.longs();
    }

    public static @org.checkerframework.checker.optional.qual.MaybePresent IntStream intStream() {
        return RANDOM.ints();
    }
}
