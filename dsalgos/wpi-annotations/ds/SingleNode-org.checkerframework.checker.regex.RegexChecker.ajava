package ds;

import java.util.Objects;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.regex.RegexChecker")
public class SingleNode<T> implements INode<T> {

    private T data;

    private  INode<T> next;

    public SingleNode(T data) {
        Objects.requireNonNull(data, "Data cannot be null.");
        this.data = data;
    }

    public SingleNode(T data,  INode<T> next) {
        this(data);
        this.next = next;
    }

    @org.checkerframework.dataflow.qual.Pure
    public  INode<T> getNext( SingleNode<T> this) {
        return next;
    }

    public void setNext( SingleNode<T> this,  INode<T> node) {
        this.next = node;
    }

    @org.checkerframework.dataflow.qual.Pure
    public INode<T> getPrev( SingleNode<T> this) {
        throw new UnsupportedOperationException("Operation invalid.");
    }

    @org.checkerframework.dataflow.qual.Pure
    public void setPrev( SingleNode<T> this,  INode<T> ignored) {
        throw new UnsupportedOperationException("Operation invalid.");
    }

    @org.checkerframework.dataflow.qual.Pure
    public T getData( SingleNode<T> this) {
        return data;
    }

    public void setData( SingleNode<T> this, T data) {
        this.data = data;
    }

    @org.checkerframework.dataflow.qual.SideEffectFree
    public  String toString( SingleNode<T> this) {
        return Objects.toString(data);
    }

    @org.checkerframework.dataflow.qual.Pure
    public boolean equals(final Object o) {
        if (o == this)
            return true;
        if (!(o instanceof SingleNode))
            return false;
        final SingleNode<?> other = (SingleNode<?>) o;
        if (!other.canEqual((Object) this))
            return false;
        final Object this$data = this.getData();
        final Object other$data = other.getData();
        if (this$data == null ? other$data != null : !this$data.equals(other$data))
            return false;
        return true;
    }

    @org.checkerframework.dataflow.qual.Pure
    protected boolean canEqual(final Object other) {
        return other instanceof SingleNode;
    }

    @org.checkerframework.dataflow.qual.Pure
    public int hashCode() {
        final int PRIME = 59;
        int result = 1;
        final Object $data = this.getData();
        result = result * PRIME + ($data == null ? 43 : $data.hashCode());
        return result;
    }
}
