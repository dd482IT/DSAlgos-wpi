package ds;

import java.util.ConcurrentModificationException;

/**
 * Demonstrates array class with high-level interface.
 *
 * <p>To run this program: C&gt;java
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.optional.OptionalChecker")
public class HighArray extends AbstractArray {

    private static final java.util.logging.Logger LOGGER = java.util.logging.Logger.getLogger(HighArray.class.getName());

    public HighArray() {
        // empty constructor
    }

    public HighArray(int max) {
        this(max, false);
    }

    public HighArray( @org.checkerframework.checker.optional.qual.MaybePresent int max,  @org.checkerframework.checker.optional.qual.MaybePresent boolean strict) {
        super(max, strict);
    }

    public HighArray(@org.checkerframework.checker.optional.qual.MaybePresent HighArray array) {
        super(array);
    }

    public @org.checkerframework.checker.optional.qual.MaybePresent IArray copy(@org.checkerframework.checker.optional.qual.MaybePresent HighArray this) {
        return new HighArray(this);
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.optional.qual.MaybePresent int findIndex(@org.checkerframework.checker.optional.qual.MaybePresent HighArray this,  @org.checkerframework.checker.optional.qual.MaybePresent long searchKey) {
        int length = nElems.intValue();
        for (int j = 0; j < length; j++) {
            if (a[j] == searchKey)
                return j;
        }
        return -1;
    }

    // -----------------------------------------------------------
    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.optional.qual.MaybePresent boolean find(@org.checkerframework.checker.optional.qual.MaybePresent HighArray this,  @org.checkerframework.checker.optional.qual.MaybePresent long searchKey) {
        return findIndex(searchKey) >= 0;
    }

    public  @org.checkerframework.checker.optional.qual.MaybePresent int insert(@org.checkerframework.checker.optional.qual.MaybePresent HighArray this,  @org.checkerframework.checker.optional.qual.MaybePresent long value) {
        int length = nElems.intValue();
        if (length == a.length)
            throw new ArrayIndexOutOfBoundsException(length);
        modCount.incrementAndGet();
        a[nElems.getAndIncrement()] = value;
        return length;
    }

    private void fastDelete(@org.checkerframework.checker.optional.qual.MaybePresent HighArray this,  @org.checkerframework.checker.optional.qual.MaybePresent int index,  @org.checkerframework.checker.optional.qual.MaybePresent int length) {
        modCount.incrementAndGet();
        // move higher ones down
        int numMoved = length - index - 1;
        System.arraycopy(a, index + 1, a, index, numMoved);
        a[nElems.decrementAndGet()] = 0;
    }

    @org.checkerframework.dataflow.qual.Deterministic
    protected void checkDeleteConcurrent(@org.checkerframework.checker.optional.qual.MaybePresent HighArray this,  @org.checkerframework.checker.optional.qual.MaybePresent int expectedCount,  @org.checkerframework.checker.optional.qual.MaybePresent long value) {
        if (expectedCount < modCount.intValue()) {
            throw new ConcurrentModificationException("Error deleting value: " + value);
        }
    }

    public  @org.checkerframework.checker.optional.qual.MaybePresent boolean delete(@org.checkerframework.checker.optional.qual.MaybePresent HighArray this,  @org.checkerframework.checker.optional.qual.MaybePresent long value) {
        int length = nElems.intValue();
        int expectedCount = modCount.intValue();
        for (int j = 0; j < length; j++) {
            if (strict)
                checkDeleteConcurrent(expectedCount, value);
            if (a[j] == value) {
                fastDelete(j, length);
                return true;
            }
        }
        return false;
    }

    @org.checkerframework.dataflow.qual.Pure
    public boolean equals(final Object o) {
        if (o == this)
            return true;
        if (!(o instanceof HighArray))
            return false;
        final HighArray other = (HighArray) o;
        if (!other.canEqual((Object) this))
            return false;
        if (!java.util.Arrays.equals(this.a, other.a))
            return false;
        final Object this$nElems = this.nElems;
        final Object other$nElems = other.nElems;
        if (this$nElems == null ? other$nElems != null : !this$nElems.equals(other$nElems))
            return false;
        return true;
    }

    @org.checkerframework.dataflow.qual.Pure
    protected boolean canEqual(final Object other) {
        return other instanceof HighArray;
    }

    @org.checkerframework.dataflow.qual.Pure
    public int hashCode() {
        final int PRIME = 59;
        int result = PRIME + java.util.Arrays.hashCode(this.a);
        final Object $nElems = this.nElems;
        result = result * PRIME + ($nElems == null ? 43 : $nElems.hashCode());
        return result;
    }
}
