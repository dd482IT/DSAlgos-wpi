package ds;

import static ds.ArrayUtils.*;
import java.util.Arrays;

/**
 *  <p>Deque implementation in Java.</p>
 * *
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public class Deque implements IQueue, IStack, IDeque {

    private static final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String QUEUE_UNDERFLOW = "Queue underflow.";

     @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] arr;

     @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int first;

     @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int last;

    public Deque(int size) {
        arr = new long[size];
        first = -1;
        last = -1;
    }

    @org.checkerframework.dataflow.qual.Pure
    public void push(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Deque this,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long j) {
        addFirst(j);
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long pop(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Deque this) {
        return poll();
    }

    @org.checkerframework.dataflow.qual.Pure
    public void insert(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Deque this,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long j) {
        addLast(j);
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long poll(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Deque this) {
        return pollFirst();
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long peek(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Deque this) {
        return peekFirst();
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean isFull(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Deque this) {
        return size() == arr.length;
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int size(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Deque this) {
        if (arr.length == 0 || first < 0)
            return 0;
        return last >= first ? last - first + 1 : arr.length - first + last + 1;
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean isEmpty(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Deque this) {
        return size() == 0;
    }

    private void reinitializePointers() {
        first = last = -1;
    }

    public void addFirst(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Deque this,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long key) {
        if (isFull())
            doubleCapacity();
        if (first == -1) {
            first = 0;
            last = 0;
        } else if (first == 0)
            first = arr.length - 1;
        else
            first = first - 1;
        arr[first] = key;
    }

    public void addLast(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Deque this,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long key) {
        if (isFull())
            doubleCapacity();
        if (first == -1) {
            first = 0;
            last = 0;
        } else if (last == arr.length - 1)
            last = 0;
        else
            last = last + 1;
        arr[last] = key;
    }

    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long pollFirst(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Deque this) {
        if (isEmpty())
            throw new IllegalStateException(QUEUE_UNDERFLOW);
        long val = arr[first];
        if (first == last) {
            reinitializePointers();
            return val;
        }
        if (first == arr.length - 1) {
            first = 0;
            return val;
        }
        ++first;
        return val;
    }

    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long pollLast(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Deque this) {
        if (isEmpty())
            throw new IllegalStateException(QUEUE_UNDERFLOW);
        long val = arr[last];
        if (first == last) {
            reinitializePointers();
            return val;
        }
        if (last == 0) {
            last = arr.length - 1;
            return val;
        }
        --last;
        return val;
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long peekFirst(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Deque this) {
        if (isEmpty())
            throw new IllegalStateException(QUEUE_UNDERFLOW);
        return arr[first];
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long peekLast(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Deque this) {
        if (isEmpty())
            throw new IllegalStateException(QUEUE_UNDERFLOW);
        return arr[last];
    }

    /**
     *  <p> Double the capacity of this deque.
     *  Call only when full, i.e.,
     *  when head and tail have wrapped around to touch each other. </p>
     * *
     */
    private void doubleCapacity() {
        int n = arr.length;
        if (n == 0)
            throw new IllegalStateException("Initial capacity is zero. Cannot be doubled.");
        int p = first;
        int r = n - p;
        long[] a = getDoubleCapacity(n);
        System.arraycopy(arr, p, a, 0, r);
        System.arraycopy(arr, 0, a, r, p);
        arr = a;
        first = 0;
        last = n - 1;
    }

    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String toString(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Deque this) {
        StringBuilder sb = new StringBuilder();
        String lineSeparator = System.lineSeparator();
        sb.append("First = ").append(first).append(lineSeparator).append("Last = ").append(last).append(lineSeparator).append(Arrays.toString(arr));
        return sb.toString();
    }
}
