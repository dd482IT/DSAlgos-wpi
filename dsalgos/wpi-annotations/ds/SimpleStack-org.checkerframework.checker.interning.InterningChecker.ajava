package ds;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.interning.InterningChecker")
public class SimpleStack implements IStack {

    private final  @org.checkerframework.checker.interning.qual.Interned int maxSize;

    private  @org.checkerframework.checker.interning.qual.Interned long  [] stackArray;

    private  @org.checkerframework.checker.interning.qual.Interned int top;

    public SimpleStack( @org.checkerframework.checker.interning.qual.Interned int s) {
        maxSize = s;
        stackArray = new long[maxSize];
        top = -1;
    }

    public void push( SimpleStack this,  @org.checkerframework.checker.interning.qual.Interned long j) {
        stackArray[top + 1] = j;
        ++top;
    }

    public  @org.checkerframework.checker.interning.qual.Interned long pop( SimpleStack this) {
        return stackArray[top--];
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.interning.qual.Interned long peek( SimpleStack this) {
        return stackArray[top];
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.interning.qual.Interned boolean isEmpty( SimpleStack this) {
        return top == -1;
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.interning.qual.Interned int size( SimpleStack this) {
        return top + 1;
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.interning.qual.Interned boolean isFull( SimpleStack this) {
        return top == maxSize - 1;
    }
}
