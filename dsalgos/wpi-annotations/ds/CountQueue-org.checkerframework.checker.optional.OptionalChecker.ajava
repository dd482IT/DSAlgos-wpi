package ds;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.optional.OptionalChecker")
public class CountQueue implements IQueue {

    private final  @org.checkerframework.checker.optional.qual.MaybePresent int maxSize;

    private  @org.checkerframework.checker.optional.qual.MaybePresent long @org.checkerframework.checker.optional.qual.MaybePresent [] queArray;

    private  @org.checkerframework.checker.optional.qual.MaybePresent int front;

    private  @org.checkerframework.checker.optional.qual.MaybePresent int rear;

    private  @org.checkerframework.checker.optional.qual.MaybePresent int nItems;

    public CountQueue(int s) {
        if (s < 0)
            throw new IllegalArgumentException("Queue size cannot be negative.");
        maxSize = s;
        queArray = new long[maxSize];
        front = 0;
        rear = -1;
        nItems = 0;
    }

    public void insert(@org.checkerframework.checker.optional.qual.MaybePresent CountQueue this,  @org.checkerframework.checker.optional.qual.MaybePresent long j) {
        if (isFull())
            throw new IllegalStateException("Queue is full.");
        if (rear == maxSize - 1)
            rear = -1;
        queArray[++rear] = j;
        nItems++;
    }

    public  @org.checkerframework.checker.optional.qual.MaybePresent long poll(@org.checkerframework.checker.optional.qual.MaybePresent CountQueue this) {
        if (isEmpty())
            throw new IllegalStateException("Queue is empty.");
        long temp = queArray[front++];
        if (front == maxSize)
            front = 0;
        nItems--;
        return temp;
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.optional.qual.MaybePresent long peek(@org.checkerframework.checker.optional.qual.MaybePresent CountQueue this) {
        if (isEmpty())
            throw new IllegalStateException("Empty queue!");
        return queArray[front];
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.optional.qual.MaybePresent boolean isEmpty(@org.checkerframework.checker.optional.qual.MaybePresent CountQueue this) {
        return nItems == 0;
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.optional.qual.MaybePresent boolean isFull(@org.checkerframework.checker.optional.qual.MaybePresent CountQueue this) {
        return nItems == maxSize;
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.optional.qual.MaybePresent int size(@org.checkerframework.checker.optional.qual.MaybePresent CountQueue this) {
        return nItems;
    }
}
