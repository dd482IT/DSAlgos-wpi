package ds;

import static ds.ArrayUtils.swapIfGreaterThan;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.interning.InterningChecker")
public class BrickSort extends AbstractBrickSort {

    protected  @org.checkerframework.checker.interning.qual.Interned boolean sorted;

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.interning.qual.Interned boolean isSorted( BrickSort this) {
        return sorted;
    }

    protected void reset( BrickSort this) {
        super.reset();
        sorted = false;
    }

    protected void sort( BrickSort this,  @org.checkerframework.checker.interning.qual.Interned long  [] a,  @org.checkerframework.checker.interning.qual.Interned int length) {
        reset();
        if (length <= 1) {
            sorted = true;
            return;
        }
        final int maxComparisons = computeMaxComparisons(length);
        while (!sorted) {
            ++outerLoopCount;
            sorted = true;
            oddSort(a, length);
            if (swapCount == maxComparisons) {
                sorted = true;
                break;
            }
            evenSort(a, length);
            if (swapCount == maxComparisons)
                sorted = true;
        }
    }

    protected void oddSort( BrickSort this,  @org.checkerframework.checker.interning.qual.Interned long  [] a,  @org.checkerframework.checker.interning.qual.Interned int length) {
        for (int i = 1; i < length - 1; i = i + 2) {
            ++innerLoopCount;
            bubble(a, i);
        }
    }

    protected void evenSort( BrickSort this,  @org.checkerframework.checker.interning.qual.Interned long  [] a,  @org.checkerframework.checker.interning.qual.Interned int length) {
        for (int i = 0; i < length - 1; i = i + 2) {
            ++innerLoopCount;
            bubble(a, i);
        }
    }

    protected void bubble( BrickSort this,  @org.checkerframework.checker.interning.qual.Interned long  [] a,  @org.checkerframework.checker.interning.qual.Interned int i) {
        ++comparisonCount;
        if (swapIfGreaterThan(a, i, i + 1)) {
            sorted = false;
            ++swapCount;
        }
    }
}
