package ds.knapsack;

import ds.Generated;
import java.util.Arrays;
import java.util.List;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public class BoundedNaiveKnapsack extends NaiveKnapsack {

    final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Item @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] origItems;

    public BoundedNaiveKnapsack(Item[] items, int capacity) {
        super(unpack(items), capacity);
        this.origItems = items.clone();
    }

    private static @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Item @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] unpack(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Item@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ... items) {
        List<Item> itemsList = Item.unpack(Arrays.asList(items.clone()));
        return itemsList.toArray(new Item[0]);
    }

    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull Solution<Integer> solve(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull BoundedNaiveKnapsack this) {
        Solution<Integer> solution = super.solve();
        List<Item> itemsList = Item.pack(solution.getItems());
        return new Solution<>(itemsList, solution.getValue());
    }

    public String toString() {
        StringBuilder sb = new StringBuilder();
        String lineSeparator = System.lineSeparator();
        if (origItems != null && origItems.length > 0) {
            sb.append(getClass().getSimpleName()).append(" problem: ").append(lineSeparator).append("Capacity : ").append(capacity).append(lineSeparator).append("Items :").append(lineSeparator);
            for (Item item : origItems) sb.append("- ").append(item).append(lineSeparator);
        }
        return sb.toString();
    }
}
