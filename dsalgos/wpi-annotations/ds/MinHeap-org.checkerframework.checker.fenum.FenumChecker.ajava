package ds;

import static ds.ArrayUtils.swap;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.fenum.FenumChecker")
public class MinHeap extends AbstractHeap {

    public MinHeap(int maxSize) {
        super(maxSize);
    }

    protected void heapifyUp(@org.checkerframework.checker.fenum.qual.FenumUnqualified MinHeap this,  @org.checkerframework.checker.fenum.qual.FenumUnqualified int i) {
        if (i == 0)
            return;
        int parent = parent(i);
        if (a[parent] > a[i]) {
            swap(i, parent);
            heapifyUp(parent);
        }
    }

    protected void heapifyDown(@org.checkerframework.checker.fenum.qual.FenumUnqualified MinHeap this,  @org.checkerframework.checker.fenum.qual.FenumUnqualified int i) {
        int left = leftChild(i);
        int right = rightChild(i);
        int smallest = i;
        if (left < nElems && a[left] < a[i])
            smallest = left;
        if (right < nElems && a[right] < a[smallest])
            smallest = right;
        if (smallest != i) {
            // swap with child having lesser value
            swap(i, smallest);
            // call heapify-down on the child
            heapifyDown(smallest);
        }
    }
}
