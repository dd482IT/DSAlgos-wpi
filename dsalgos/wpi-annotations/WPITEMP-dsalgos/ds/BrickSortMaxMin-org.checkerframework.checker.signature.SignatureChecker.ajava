package ds;

import static ds.ArrayUtils.swapIfGreaterThan;
import static ds.MathUtils.isOdd;

/**
 * Not thread-safe with state variables.
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.signature.SignatureChecker")
public class BrickSortMaxMin extends AbstractBrickSort {

    protected  @org.checkerframework.checker.signature.qual.SignatureUnknown boolean sorted;

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.signature.qual.SignatureUnknown boolean isSorted(@org.checkerframework.checker.signature.qual.SignatureUnknown BrickSortMaxMin this) {
        return sorted;
    }

    protected void reset(@org.checkerframework.checker.signature.qual.SignatureUnknown BrickSortMaxMin this) {
        super.reset();
        sorted = false;
    }

    protected void sort(@org.checkerframework.checker.signature.qual.SignatureUnknown BrickSortMaxMin this,  @org.checkerframework.checker.signature.qual.SignatureUnknown long @org.checkerframework.checker.signature.qual.SignatureUnknown [] a,  @org.checkerframework.checker.signature.qual.SignatureUnknown int length) {
        reset();
        if (length <= 1) {
            sorted = true;
            return;
        }
        final int maxComparisons = computeMaxComparisons(length);
        while (!sorted) {
            ++outerLoopCount;
            sorted = true;
            brickSort(a, length);
            if (swapCount == maxComparisons)
                sorted = true;
        }
    }

    protected void brickSort(@org.checkerframework.checker.signature.qual.SignatureUnknown BrickSortMaxMin this,  @org.checkerframework.checker.signature.qual.SignatureUnknown long @org.checkerframework.checker.signature.qual.SignatureUnknown [] a,  @org.checkerframework.checker.signature.qual.SignatureUnknown int length) {
        int i = 0;
        for (int iterations = 0; i < length - 1; i += 2, iterations++) {
            ++innerLoopCount;
            bubble(a, i);
            if (iterations > 0)
                bubble(a, i - 1);
        }
        if (isOdd(length))
            bubble(a, i - 1);
    }

    protected void bubble(@org.checkerframework.checker.signature.qual.SignatureUnknown BrickSortMaxMin this,  @org.checkerframework.checker.signature.qual.SignatureUnknown long @org.checkerframework.checker.signature.qual.SignatureUnknown [] a,  @org.checkerframework.checker.signature.qual.SignatureUnknown int i) {
        ++comparisonCount;
        if (swapIfGreaterThan(a, i, i + 1)) {
            sorted = false;
            ++swapCount;
        }
    }

    public @org.checkerframework.checker.signature.qual.SignatureUnknown String toString(@org.checkerframework.checker.signature.qual.SignatureUnknown BrickSortMaxMin this) {
        StringBuilder sb = new StringBuilder(90);
        String lineSeparator = System.lineSeparator();
        sb.append(getClass().getName()).append(lineSeparator).append("Comparison count: ").append(comparisonCount).append(lineSeparator).append("Swap count: ").append(swapCount).append(lineSeparator).append("Copy count: ").append(copyCount).append(lineSeparator).append("inner loop count: ").append(innerLoopCount).append(lineSeparator).append("outer loop count: ").append(outerLoopCount).append(lineSeparator).append("sorted: ").append(sorted).append(lineSeparator);
        return sb.toString();
    }
}
