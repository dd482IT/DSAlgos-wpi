package ds;

import static java.util.Objects.*;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.fenum.FenumChecker")
public class AnagramGenerator {

    private static final  @org.checkerframework.checker.fenum.qual.FenumUnqualified int TWO = 2;

    private  @org.checkerframework.checker.fenum.qual.FenumUnqualified char @org.checkerframework.checker.fenum.qual.FenumUnqualified [] arrChar;

    private final @org.checkerframework.checker.fenum.qual.FenumUnqualified List<String> anagrams;

    public AnagramGenerator(String input) {
        requireNonNull(input, "Input cannot be null!");
        if (!input.matches("^[A-Za-z]*$"))
            throw new IllegalArgumentException("String should contain only alphabetic characters.");
        arrChar = input.toCharArray();
        anagrams = new ArrayList<>();
    }

    public void generate() {
        generate(arrChar.length);
    }

    public void generate(@org.checkerframework.checker.fenum.qual.FenumUnqualified AnagramGenerator this,  @org.checkerframework.checker.fenum.qual.FenumUnqualified int size) {
        if (size == 1) {
            addWordToList();
            return;
        }
        for (int j = 0; j < size; j++) {
            generate(size - 1);
            if (size == TWO)
                addWordToList();
            rotate(size);
        }
    }

    private void rotate(@org.checkerframework.checker.fenum.qual.FenumUnqualified AnagramGenerator this,  @org.checkerframework.checker.fenum.qual.FenumUnqualified int newSize) {
        int size = arrChar.length;
        int position = size - newSize;
        char temp = arrChar[position];
        int j = position + 1;
        for (; j < size; j++) arrChar[j - 1] = arrChar[j];
        arrChar[j - 1] = temp;
    }

    private void addWordToList(@org.checkerframework.checker.fenum.qual.FenumUnqualified AnagramGenerator this) {
        String word = new String(arrChar);
        if (!anagrams.contains(word))
            anagrams.add(word);
    }

    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.fenum.qual.FenumUnqualified List<String> getAnagrams() {
        return anagrams;
    }

    public @org.checkerframework.checker.fenum.qual.FenumUnqualified List<String> getValidAnagrams() throws IOException {
        List<String> validAnagrams = new ArrayList<>();
        for (String anagram : anagrams) {
            if (DictionaryLookup.isDictionaryWord(anagram))
                validAnagrams.add(anagram);
        }
        return validAnagrams;
    }
}
