package ds;

import static ds.ArrayUtils.swap;
import static ds.RandomUtils.randomInRange;
import static java.util.Objects.checkIndex;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.fenum.FenumChecker")
public class QuickSelect {

    protected final  @org.checkerframework.checker.fenum.qual.FenumUnqualified long @org.checkerframework.checker.fenum.qual.FenumUnqualified [] array;

    public QuickSelect( @org.checkerframework.checker.fenum.qual.FenumUnqualified long@org.checkerframework.checker.fenum.qual.FenumUnqualified ... arr) {
        this.array = arr;
    }

    public  @org.checkerframework.checker.fenum.qual.FenumUnqualified long find(@org.checkerframework.checker.fenum.qual.FenumUnqualified QuickSelect this,  @org.checkerframework.checker.fenum.qual.FenumUnqualified int index) {
        checkIndex(index, array.length);
        return select(0, array.length - 1, index);
    }

    private  @org.checkerframework.checker.fenum.qual.FenumUnqualified int partition(@org.checkerframework.checker.fenum.qual.FenumUnqualified QuickSelect this,  @org.checkerframework.checker.fenum.qual.FenumUnqualified int left,  @org.checkerframework.checker.fenum.qual.FenumUnqualified int right,  @org.checkerframework.checker.fenum.qual.FenumUnqualified int pivotIndex) {
        long pivotValue = array[pivotIndex];
        // Move pivot to end
        swap(array, pivotIndex, right);
        int storeIndex = left;
        for (int i = left; i < right; i++) {
            if (array[i] < pivotValue) {
                swap(array, storeIndex, i);
                ++storeIndex;
            }
        }
        swap(array, right, storeIndex);
        return storeIndex;
    }

    private  @org.checkerframework.checker.fenum.qual.FenumUnqualified long select(@org.checkerframework.checker.fenum.qual.FenumUnqualified QuickSelect this,  @org.checkerframework.checker.fenum.qual.FenumUnqualified int left,  @org.checkerframework.checker.fenum.qual.FenumUnqualified int right,  @org.checkerframework.checker.fenum.qual.FenumUnqualified int k) {
        if (left == right)
            return array[left];
        int pivotIndex = randomInRange(left, right);
        pivotIndex = partition(left, right, pivotIndex);
        if (k == pivotIndex)
            return array[k];
        else if (k < pivotIndex)
            return select(left, pivotIndex - 1, k);
        else
            return select(pivotIndex + 1, right, k);
    }
}
