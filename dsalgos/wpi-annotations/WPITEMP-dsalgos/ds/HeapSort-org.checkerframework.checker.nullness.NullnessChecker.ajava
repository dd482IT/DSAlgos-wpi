package ds;

/**
 * Heap sort.
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public class HeapSort extends AbstractSort {

    protected void sort(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull HeapSort this,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] a,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int length) {
        if (!shouldSort(length))
            return;
        heapSort(a, length);
    }

    void heapSort( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] a,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int length) {
        // Build heap (rearrange array)
        for (int i = (length >> 1) - 1; i >= 0; --i) {
            ++outerLoopCount;
            heapify(a, length, i);
        }
        // One by one extract an element from heap
        for (int i = length - 1; i > 0; --i) {
            ++outerLoopCount;
            // Move current root to end
            ++comparisonCount;
            if (a[i] != a[0]) {
                swap(a, i, 0);
                ++swapCount;
            }
            // call max heapify on the reduced heap
            heapify(a, i, 0);
        }
    }

    // To heapify a subtree rooted with node i which is
    // an index in a[]. n is size of heap
    void heapify( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] a,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int n,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int i) {
        int largest = i;
        // Initialize largest as root
        int left = 2 * i + 1;
        int right = 2 * i + 2;
        // If left child is larger than root
        if (left < n && a[left] > a[largest]) {
            largest = left;
            ++comparisonCount;
        }
        // If right child is larger than largest so far
        if (right < n && a[right] > a[largest]) {
            largest = right;
            ++comparisonCount;
        }
        // If largest is not root
        if (largest != i) {
            swap(a, i, largest);
            ++swapCount;
            ++comparisonCount;
            // Recursively heapify the affected sub-tree
            heapify(a, n, largest);
        }
    }
}
