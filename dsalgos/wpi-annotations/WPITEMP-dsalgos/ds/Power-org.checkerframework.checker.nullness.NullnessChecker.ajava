package ds;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public class Power {

    private final  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int base;

    private final  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int exponent;

    public Power( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int base,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int exponent) {
        if (exponent < 0 && base == 0)
            throw new IllegalArgumentException("It's impossible to raise 0 to the power of a negative number.");
        this.base = base;
        this.exponent = exponent;
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int getBase() {
        return base;
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int getExponent() {
        return exponent;
    }

    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull double compute() {
        if (exponent == 0)
            return 1.0f;
        if (base == 0)
            return 0;
        if (exponent < 0)
            return 1.0f / new Power(base, -1 * exponent).compute();
        else {
            double powerOfHalfN = new Power(base, exponent >> 1).compute();
            double[] factor = { 1f, base };
            return factor[exponent % 2] * powerOfHalfN * powerOfHalfN;
        }
    }
}
