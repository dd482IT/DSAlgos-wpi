package ds;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.regex.RegexChecker")
public class NoCountQueue implements IQueue {

    private final   int maxSize;

    private   long  [] queArray;

    private   int front;

    private   int rear;

    public NoCountQueue(int s) {
        if (s < 0)
            throw new IllegalArgumentException("Queue size cannot be negative.");
        maxSize = s + 1;
        queArray = new long[maxSize];
        front = 0;
        rear = -1;
    }

    private void initialisePointers( NoCountQueue this) {
        front = 0;
        rear = -1;
    }

    public void insert( NoCountQueue this,   long j) {
        if (isFull())
            throw new IllegalStateException("Queue is full.");
        queArray[++rear] = j;
    }

    @org.checkerframework.dataflow.qual.Pure
    private   boolean isSingleElementQueue( NoCountQueue this) {
        return front == rear;
    }

    public   long poll( NoCountQueue this) {
        if (isEmpty())
            throw new IllegalStateException("Queue is empty.");
        long temp = queArray[front];
        if (isSingleElementQueue())
            initialisePointers();
        else
            ++front;
        return temp;
    }

    @org.checkerframework.dataflow.qual.Pure
    public   long peek( NoCountQueue this) {
        if (isEmpty())
            throw new IllegalStateException("Empty queue!");
        return queArray[front];
    }

    @org.checkerframework.dataflow.qual.Pure
    public   boolean isEmpty( NoCountQueue this) {
        return (rear + 1) % maxSize == front;
    }

    @org.checkerframework.dataflow.qual.Pure
    public   boolean isFull( NoCountQueue this) {
        return (rear + 2) % maxSize == front;
    }

    @org.checkerframework.dataflow.qual.Pure
    public   int size( NoCountQueue this) {
        return rear - front + 1;
    }
}
