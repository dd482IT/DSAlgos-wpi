package ds;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.optional.OptionalChecker")
public abstract class AbstractSort implements ISort {

    protected  @org.checkerframework.checker.optional.qual.MaybePresent int comparisonCount;

    protected  @org.checkerframework.checker.optional.qual.MaybePresent int swapCount;

    protected  @org.checkerframework.checker.optional.qual.MaybePresent int copyCount;

    protected  @org.checkerframework.checker.optional.qual.MaybePresent int innerLoopCount;

    protected  @org.checkerframework.checker.optional.qual.MaybePresent int outerLoopCount;

    protected  @org.checkerframework.checker.optional.qual.MaybePresent boolean shouldSort(@org.checkerframework.checker.optional.qual.MaybePresent AbstractSort this,  @org.checkerframework.checker.optional.qual.MaybePresent int length) {
        if (length < 0)
            throw new IllegalArgumentException("Illegal value for length: " + length);
        reset();
        return length <= 1 ? false : true;
    }

    @org.checkerframework.dataflow.qual.Pure
    protected abstract void sort(@org.checkerframework.checker.optional.qual.MaybePresent AbstractSort this,  @org.checkerframework.checker.optional.qual.MaybePresent long @org.checkerframework.checker.optional.qual.MaybePresent [] array,  @org.checkerframework.checker.optional.qual.MaybePresent int length);

    @org.checkerframework.dataflow.qual.Pure
    public @org.checkerframework.checker.optional.qual.MaybePresent IArray sort(@org.checkerframework.checker.optional.qual.MaybePresent AbstractSort this, @org.checkerframework.checker.optional.qual.MaybePresent IArray array) {
        IArray copy = array.copy();
        sort(copy.get(), copy.count());
        return copy;
    }

    protected final  @org.checkerframework.checker.optional.qual.MaybePresent boolean swap(@org.checkerframework.checker.optional.qual.MaybePresent AbstractSort this,  @org.checkerframework.checker.optional.qual.MaybePresent long @org.checkerframework.checker.optional.qual.MaybePresent [] a,  @org.checkerframework.checker.optional.qual.MaybePresent int first,  @org.checkerframework.checker.optional.qual.MaybePresent int second) {
        return ArrayUtils.swap(a, first, second);
    }

    protected void reset(@org.checkerframework.checker.optional.qual.MaybePresent AbstractSort this) {
        copyCount = swapCount = comparisonCount = innerLoopCount = outerLoopCount = 0;
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.optional.qual.MaybePresent int getCopyCount(@org.checkerframework.checker.optional.qual.MaybePresent AbstractSort this) {
        return copyCount;
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.optional.qual.MaybePresent int getSwapCount(@org.checkerframework.checker.optional.qual.MaybePresent AbstractSort this) {
        return swapCount;
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.optional.qual.MaybePresent int getComparisonCount(@org.checkerframework.checker.optional.qual.MaybePresent AbstractSort this) {
        return comparisonCount;
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.optional.qual.MaybePresent int getTimeComplexity(@org.checkerframework.checker.optional.qual.MaybePresent AbstractSort this) {
        return innerLoopCount == 0 ? outerLoopCount : innerLoopCount;
    }

    public @org.checkerframework.checker.optional.qual.MaybePresent String toString(@org.checkerframework.checker.optional.qual.MaybePresent AbstractSort this) {
        StringBuilder sb = new StringBuilder(80);
        String lineSeparator = System.lineSeparator();
        sb.append(getClass().getName()).append(lineSeparator).append("Comparison count: ").append(comparisonCount).append(lineSeparator).append("Swap count: ").append(swapCount).append(lineSeparator).append("Copy count: ").append(copyCount).append(lineSeparator).append("inner loop count: ").append(innerLoopCount).append(lineSeparator).append("outer loop count: ").append(outerLoopCount);
        return sb.toString();
    }
}
