package ds;

import java.io.IOException;
import java.net.HttpURLConnection;
import java.net.URL;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public final class DictionaryLookup {

    private static final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String URL = "https://api.dictionaryapi.dev/api/v2/entries/en/";

    private static final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String GET = "GET";

    private static final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String USER_AGENT = "Mozilla/5.0";

    @org.checkerframework.dataflow.qual.SideEffectFree
    private DictionaryLookup() {
        throw new IllegalStateException(DictionaryLookup.class.getName() + ": Private constructor");
    }

    public static  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean isDictionaryWord(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String word) throws IOException {
        return isWordAvailable(word);
    }

    /**
     *  <p>Use with caution. Rate limiting applies.
     *  Proof of Concept(POC).</p>
     * *
     */
    private static  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean isWordAvailable(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String word) throws IOException {
        String wordUrl = URL + word;
        URL obj = new URL(wordUrl);
        HttpURLConnection con = (HttpURLConnection) obj.openConnection();
        con.setRequestMethod(GET);
        con.setRequestProperty("User-Agent", USER_AGENT);
        return con.getResponseCode() == HttpURLConnection.HTTP_OK;
    }
}
