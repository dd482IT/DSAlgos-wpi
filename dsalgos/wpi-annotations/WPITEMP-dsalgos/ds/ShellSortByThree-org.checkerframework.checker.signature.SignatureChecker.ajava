package ds;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.signature.SignatureChecker")
public class ShellSortByThree extends AbstractSort {

    private static final  @org.checkerframework.checker.signature.qual.SignatureUnknown int THREE = 3;

    protected  @org.checkerframework.checker.signature.qual.SignatureUnknown int gapCount;

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.signature.qual.SignatureUnknown int getTimeComplexity(@org.checkerframework.checker.signature.qual.SignatureUnknown ShellSortByThree this) {
        return innerLoopCount > 0 ? innerLoopCount : outerLoopCount > 0 ? outerLoopCount : gapCount;
    }

    protected void reset(@org.checkerframework.checker.signature.qual.SignatureUnknown ShellSortByThree this) {
        super.reset();
        gapCount = 0;
    }

    protected void sort(@org.checkerframework.checker.signature.qual.SignatureUnknown ShellSortByThree this,  @org.checkerframework.checker.signature.qual.SignatureUnknown long @org.checkerframework.checker.signature.qual.SignatureUnknown [] a,  @org.checkerframework.checker.signature.qual.SignatureUnknown int length) {
        reset();
        if (length <= 1)
            return;
        int n = length;
        int h = 1;
        while (h <= n / THREE) h = h * THREE + 1;
        // decreasing h, until h=1
        while (h > 0) {
            ++gapCount;
            for (int outer = h; outer < n; outer++) {
                long temp = a[outer];
                ++outerLoopCount;
                int inner = outer;
                while (inner > h - 1 && a[inner - h] >= temp) {
                    ++innerLoopCount;
                    ++comparisonCount;
                    ++copyCount;
                    System.arraycopy(a, inner - h, a, inner, 1);
                    inner -= h;
                }
                if (inner > h - 1)
                    ++comparisonCount;
                a[inner] = temp;
            }
            h = (h - 1) / THREE;
        }
    }
}
