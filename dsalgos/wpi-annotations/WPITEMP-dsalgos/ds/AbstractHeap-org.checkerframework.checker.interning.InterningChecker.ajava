package ds;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.interning.InterningChecker")
public abstract class AbstractHeap implements IQueue {

    protected  @org.checkerframework.checker.interning.qual.Interned long  [] a;

    protected  @org.checkerframework.checker.interning.qual.Interned int nElems;

    public AbstractHeap( @org.checkerframework.checker.interning.qual.Interned int maxSize) {
        if (maxSize < 0)
            throw new IllegalArgumentException("Invalid parameter: " + maxSize);
        a = new long[maxSize];
        nElems = 0;
    }

    @org.checkerframework.dataflow.qual.Pure
    protected abstract void heapifyUp( AbstractHeap this,  @org.checkerframework.checker.interning.qual.Interned int i);

    @org.checkerframework.dataflow.qual.Pure
    protected abstract void heapifyDown( AbstractHeap this,  @org.checkerframework.checker.interning.qual.Interned int i);

    /**
     * Function to return the position of the parent for the node currently at pos.
     */
    @org.checkerframework.dataflow.qual.Pure
    protected  @org.checkerframework.checker.interning.qual.Interned int parent( AbstractHeap this,  @org.checkerframework.checker.interning.qual.Interned int pos) {
        return (pos - 1) >> 1;
    }

    /**
     * Return position of left child for node currently at pos.
     */
    @org.checkerframework.dataflow.qual.Pure
    protected  @org.checkerframework.checker.interning.qual.Interned int leftChild( AbstractHeap this,  @org.checkerframework.checker.interning.qual.Interned int pos) {
        return 2 * pos + 1;
    }

    /**
     * Return position of right child for node currently at pos.
     */
    @org.checkerframework.dataflow.qual.Pure
    protected  @org.checkerframework.checker.interning.qual.Interned int rightChild( AbstractHeap this,  @org.checkerframework.checker.interning.qual.Interned int pos) {
        return (pos << 1) + 2;
    }

    /**
     * Function to swap two nodes of the heap.
     */
    protected void swap( AbstractHeap this,  @org.checkerframework.checker.interning.qual.Interned int fpos,  @org.checkerframework.checker.interning.qual.Interned int spos) {
        ArrayUtils.swap(a, fpos, spos);
    }

    /**
     * Function to insert a node into the heap.
     */
    public void insert( AbstractHeap this,  @org.checkerframework.checker.interning.qual.Interned long element) {
        if (isFull())
            throw new IllegalStateException("Queue full: number of elements is " + nElems);
        a[nElems++] = element;
        heapifyUp(nElems - 1);
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.interning.qual.Interned boolean isEmpty( AbstractHeap this) {
        return nElems == 0;
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.interning.qual.Interned boolean isFull( AbstractHeap this) {
        return nElems == a.length;
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.interning.qual.Interned int size( AbstractHeap this) {
        return nElems;
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.interning.qual.Interned long peek( AbstractHeap this) {
        if (isEmpty())
            throw new IllegalStateException("Queue empty: " + nElems + " elements.");
        return a[0];
    }

    /**
     * Function to remove and return the minimum element from the heap.
     */
    public  @org.checkerframework.checker.interning.qual.Interned long poll( AbstractHeap this) {
        if (isEmpty())
            throw new IllegalStateException("Queue empty: " + nElems + " elements.");
        long root = a[0];
        a[0] = a[--nElems];
        heapifyDown(0);
        return root;
    }
}
