package ds;

import static ds.ArrayUtils.swapIfGreaterThan;
import static ds.AssertionUtils.*;
import static ds.ExecutorUtils.terminateExecutor;
import static ds.MathUtils.*;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CompletionException;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;

/**
 * Not thread-safe with state variables.
 */
@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.nullness.NullnessChecker")
public class BrickSortParallel extends BrickSort {

    private static final  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int THRESHOLD = 40;

    private final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull AtomicBoolean sorted = new AtomicBoolean();

    private final @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull AtomicInteger swapCount = new AtomicInteger();

    protected void reset(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull BrickSortParallel this) {
        super.reset();
        sorted.getAndSet(false);
        swapCount.set(0);
    }

    private void sequentialSort( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] a,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int length) {
        super.sort(a, length);
        sorted.getAndSet(super.sorted);
        swapCount.set(super.swapCount);
    }

    protected void sort(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull BrickSortParallel this,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] a,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int length) {
        if (!shouldSort(length)) {
            sorted.getAndSet(true);
            return;
        }
        if (length <= THRESHOLD) {
            sequentialSort(a, length);
            return;
        }
        ExecutorService service = Executors.newSingleThreadExecutor();
        try {
            sortInterruptibly(a, length, service);
        } catch (ExecutionException | InterruptedException ee) {
            throw new CompletionException(ee);
        } finally {
            terminateExecutor(service, length, TimeUnit.MILLISECONDS);
        }
        assertServiceTerminated(service);
    }

    protected void sortInterruptibly( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] a,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int length, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ExecutorService service) throws InterruptedException, ExecutionException {
        final int maxComparisons = computeMaxComparisons(length);
        final int oddTaskCount = computeOddPairCount(length);
        final int evenTaskCount = computeEvenPairCount(length);
        while (!sorted.get()) {
            ++outerLoopCount;
            sorted.set(true);
            oddSort(a, length, service, oddTaskCount);
            if (swapCount.intValue() == maxComparisons) {
                sorted.set(true);
                break;
            }
            evenSort(a, length, service, evenTaskCount);
            if (swapCount.intValue() == maxComparisons)
                sorted.set(true);
        }
    }

    protected void oddSort( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] a,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int length, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ExecutorService service,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int oddTaskCount) throws InterruptedException, ExecutionException {
        List<Future<Void>> futures = new ArrayList<>(oddTaskCount);
        BubbleTask bt = new BubbleTask(this, a, 0);
        for (int i = 1; i < length - 1; i += 2) {
            ++innerLoopCount;
            ++comparisonCount;
            BubbleTask task = BubbleTask.createCopy(bt);
            task.i = i;
            futures.add(service.submit(task));
        }
        assertEquality(futures.size(), oddTaskCount);
        for (Future future : futures) future.get();
    }

    protected void evenSort( @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] a,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int length, @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull ExecutorService service,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int evenTaskCount) throws InterruptedException, ExecutionException {
        List<Future<Void>> futures = new ArrayList<>(evenTaskCount);
        BubbleTask bt = new BubbleTask(this, a, 0);
        for (int i = 0; i < length - 1; i += 2) {
            ++innerLoopCount;
            ++comparisonCount;
            BubbleTask task = BubbleTask.createCopy(bt);
            task.i = i;
            futures.add(service.submit(task));
        }
        assertEquality(futures.size(), evenTaskCount);
        for (Future future : futures) future.get();
    }

    protected void bubble(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull BrickSortParallel this,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull long @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull [] a,  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int i) {
        if (swapIfGreaterThan(a, i, i + 1)) {
            swapCount.incrementAndGet();
            sorted.set(false);
        }
    }

    @org.checkerframework.dataflow.qual.Pure
    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull int getSwapCount(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull BrickSortParallel this) {
        return swapCount.intValue();
    }

    public  @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull boolean isSorted(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull BrickSortParallel this) {
        return sorted.get();
    }

    public @org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull String toString(@org.checkerframework.checker.initialization.qual.Initialized @org.checkerframework.checker.nullness.qual.NonNull BrickSortParallel this) {
        StringBuilder sb = new StringBuilder(90);
        String lineSeparator = System.lineSeparator();
        sb.append(getClass().getName()).append(lineSeparator).append("Comparison count: ").append(comparisonCount).append(lineSeparator).append("Swap count: ").append(swapCount).append(lineSeparator).append("Copy count: ").append(copyCount).append(lineSeparator).append("inner loop count: ").append(innerLoopCount).append(lineSeparator).append("outer loop count: ").append(outerLoopCount).append(lineSeparator).append("sorted: ").append(sorted).append(lineSeparator);
        return sb.toString();
    }
}
