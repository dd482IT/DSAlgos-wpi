package ds;

@org.checkerframework.framework.qual.AnnotatedFor("org.checkerframework.checker.interning.InterningChecker")
public class BracketChecker {

    private final  String input;

    public BracketChecker(String in) {
        input = in;
    }

    @org.checkerframework.dataflow.qual.Pure
    private  @org.checkerframework.checker.interning.qual.Interned boolean handleClosingBracket( BracketChecker this,  IStack theStack,  @org.checkerframework.checker.interning.qual.Interned char ch) {
        boolean matchFound = true;
        if (theStack.isEmpty()) {
            matchFound = false;
        } else {
            char chx = (char) theStack.pop();
            if (!doesBracketMatch(chx, ch)) {
                matchFound = false;
            }
        }
        return matchFound;
    }

    public  @org.checkerframework.checker.interning.qual.Interned boolean check() {
        boolean matchFound = true;
        IStack theStack = new LinkedListStack();
        for (int j = 0; j < input.length() && matchFound; j++) {
            char ch = input.charAt(j);
            switch(ch) {
                case '{':
                case '[':
                case '(':
                    theStack.push(ch);
                    break;
                case '}':
                case ']':
                case ')':
                    matchFound = handleClosingBracket(theStack, ch);
                    break;
                default:
            }
        }
        if (!theStack.isEmpty()) {
            matchFound = false;
        }
        return matchFound;
    }

    @org.checkerframework.dataflow.qual.Pure
    private  @org.checkerframework.checker.interning.qual.Interned boolean doesBracketMatch( BracketChecker this,  @org.checkerframework.checker.interning.qual.Interned char start,  @org.checkerframework.checker.interning.qual.Interned char end) {
        return start == '{' && end == '}' || start == '[' && end == ']' || start == '(' && end == ')';
    }
}
